---
name: Grafana Integration Screenshots (Playwright)

on:
  pull_request:
    branches: [master]
    paths:
      - 'grafana/**'
      - 'demo/**'
      - '.github/workflows/grafana-integration-playwright.yml'
  push:
    branches: [master]
    paths:
      - 'grafana/**'
      - 'demo/**'
      - '.github/workflows/grafana-integration-playwright.yml'
  workflow_dispatch:

jobs:
  grafana-integration-playwright:
    runs-on: ubuntu-latest
    name: Generate Grafana Dashboard Screenshots with Playwright

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright dependencies
        run: |
          npm init -y
          npm install playwright
          sudo apt-get update
          sudo apt-get install -y xvfb
          
          # Install Playwright browsers
          npx playwright install chromium

      - name: Setup Grafana provisioning
        run: |
          ./.github/scripts/setup-grafana-provisioning.sh

      - name: Start Docker services
        run: |
          cd demo
          docker compose up -d --build

          # Wait for services to be healthy using healthchecks
          echo "Waiting for services to be ready..."
          sleep 45

          # Check service status
          echo "=== Docker Services Status ==="
          docker compose ps
          
          echo "=== Service Logs ==="
          docker compose logs --tail=30
          
          # Test service connectivity with more retries
          echo "=== Testing Service Connectivity ==="
          for i in {1..15}; do
            echo "Attempt $i/15..."
            if curl -s http://localhost:8080/ > /dev/null; then
              echo "✓ Symfony app is responding"
              break
            else
              echo "⚠ Symfony app not ready yet..."
              sleep 5
            fi
          done
          
          for i in {1..15}; do
            echo "Attempt $i/15..."
            if curl -s http://localhost:9090/-/ready > /dev/null; then
              echo "✓ Prometheus is ready"
              break
            else
              echo "⚠ Prometheus not ready yet..."
              sleep 5
            fi
          done
          
          # Wait for Grafana to be ready
          for i in {1..15}; do
            echo "Attempt $i/15..."
            if curl -s http://localhost:3000/api/health > /dev/null; then
              echo "✓ Grafana health API is ready"
              
              # Check that the frontend is not showing the error page
              frontend_response=$(curl -s http://localhost:3000/login)
              if echo "$frontend_response" | grep -q "failed to load its application files"; then
                echo "⚠ Grafana frontend failed to load, waiting..."
                sleep 10
                continue
              else
                echo "✓ Grafana frontend is ready"
                break
              fi
            else
              echo "⚠ Grafana not ready yet..."
              sleep 5
            fi
          done

      - name: Start continuous traffic generation in background
        run: |
          echo "Starting continuous traffic generation for 5 minutes..."
          ./.github/scripts/generate-traffic.sh --continuous > traffic.log 2>&1 &
          echo $! > traffic_pid.txt
          echo "Traffic generation started in background with PID $(cat traffic_pid.txt)"

      - name: Verify Prometheus is collecting metrics
        run: |
          echo "Checking Prometheus metrics..."
          curl -s "http://localhost:9090/api/v1/query?query=symfony_http_requests_total" | jq '.' || true

          echo "Checking if Grafana can reach Prometheus..."
          curl -s "http://localhost:3000/api/datasources/proxy/1/api/v1/query?query=up" | head -20 || true

      - name: Debug and fix Grafana if needed
        run: |
          echo "=== Grafana Status Check ==="
          
          # Check if Grafana frontend is working by looking for login form elements
          if curl -s "http://localhost:3000/login" | grep -q 'input.*name.*user\|input.*name.*email\|input.*name.*username\|class.*login'; then
            echo "✓ Grafana frontend appears to be working"
          else
            echo "Grafana frontend has issues, attempting to restart..."
            cd demo
            docker compose restart grafana
            sleep 30
            
            # Check again
            for i in {1..10}; do
              echo "Retry attempt $i/10..."
              if curl -s "http://localhost:3000/api/health" > /dev/null; then
                if curl -s "http://localhost:3000/login" | grep -q 'input.*name.*user\|input.*name.*email\|input.*name.*username\|class.*login'; then
                  echo "✓ Grafana frontend is now working"
                  break
                else
                  echo "⚠ Frontend still has issues..."
                  sleep 10
                fi
              else
                echo "⚠ Grafana health check failed..."
                sleep 5
              fi
            done
          fi
          
          echo "=== Final Grafana Status ==="
          curl -s "http://localhost:3000/api/health" | jq '.' || echo "Health check failed"

      - name: Debug services status before screenshots
        run: |
          echo "=== Grafana Status Check ==="
          
          # Check if Grafana frontend is working by looking for login form elements
          if curl -s "http://localhost:3000/login" | grep -q 'input.*name.*user\|input.*name.*email\|input.*name.*username\|class.*login'; then
            echo "✓ Grafana frontend appears to be working"
          else
            echo "Grafana frontend has issues, attempting to restart..."
            cd demo
            docker compose restart grafana
            sleep 30
            
            # Check again
            for i in {1..10}; do
              echo "Retry attempt $i/10..."
              if curl -s "http://localhost:3000/api/health" > /dev/null; then
                if curl -s "http://localhost:3000/login" | grep -q 'input.*name.*user\|input.*name.*email\|input.*name.*username\|class.*login'; then
                  echo "✓ Grafana frontend is now working"
                  break
                else
                  echo "⚠ Frontend still has issues..."
                  sleep 10
                fi
              else
                echo "⚠ Grafana health check failed..."
                sleep 5
              fi
            done
          fi
          
          echo "=== Final Grafana Status ==="
          curl -s "http://localhost:3000/api/health" | jq '.' || echo "Health check failed"
          
          echo "=== Service Status ==="
          docker compose -f demo/docker-compose.yml ps
          
          echo "=== Grafana Health Check ==="
          curl -s "http://localhost:3000/api/health" | jq '.' || true
          
          echo "=== Available Dashboards ==="
          curl -s -u admin:admin "http://localhost:3000/api/search?type=dash-db" | jq '.' || true
          
          echo "=== Prometheus Targets ==="
          curl -s "http://localhost:9090/api/v1/targets" | jq '.data.activeTargets' || true

      - name: Capture live dashboard screenshots (Playwright)
        run: |
          echo "Capturing screenshots with Playwright - 5 minute time range and 5 second refresh..."
          node .github/scripts/capture-screenshots-playwright.js

      - name: Stop traffic generation
        run: |
          if [ -f traffic_pid.txt ]; then
            TRAFFIC_PID=$(cat traffic_pid.txt)
            echo "Stopping traffic generation (PID: $TRAFFIC_PID)"
            kill $TRAFFIC_PID || true
            rm traffic_pid.txt
          fi

      - name: Verify screenshots were created
        run: |
          ls -la screenshots/
          file screenshots/*.png || true

      - name: Stop Docker services
        run: |
          # Stop any remaining traffic generation
          if [ -f traffic_pid.txt ]; then
            TRAFFIC_PID=$(cat traffic_pid.txt)
            echo "Stopping any remaining traffic generation (PID: $TRAFFIC_PID)"
            kill $TRAFFIC_PID || true
            rm traffic_pid.txt
          fi
          
          cd demo
          docker compose down
          docker compose logs --tail=50 || true

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: grafana-dashboard-screenshots-playwright
          path: screenshots/
          retention-days: 30

      - name: Upload service logs for debugging
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: service-logs-playwright
          path: demo/
          retention-days: 7